/* Generated By:JavaCC: Do not edit this line. MoolMinusParser.java */
package parser;
import java.util.*;
import class_elements.*;
import parser_structures.*;
import com.microsoft.z3.*;
import logic.*;

public class MoolMinusParser implements MoolMinusParserConstants {
  static boolean parser_context = false;

  static HashMap < String, String > cfg = new HashMap < String, String > ();

  static
  {
    cfg.put("proof", "true");
  }

  static Context ctx = new Context(cfg);

  static Token class_name;

  static HashMap < String, MoolClass > mool_classes = new HashMap < String, MoolClass > ();

  static HashMap < String, List < MoolMethod >> mool_classes_methods = new HashMap < String, List < MoolMethod >> ();

  static HashMap < String, String > class_fields = new HashMap < String, String > ();

  static HashMap < String, String > local_variables = new HashMap < String, String > ();

  static HashMap < String, String > method_params = new HashMap < String, String > ();

  //static Expr invariant, initial;  static ASTNode invariant, initial;

  static ASTNode constructor_requires = new ASTTrue(ctx);

  static Token constructor_name; //, constructor_body;
  static ASTNode constructor_body;

  static Token method_name, method_body;

  static MoolClass mool_class;

  static List < MoolMethod > methods = new ArrayList < MoolMethod > ();

  static List < MoolField > fields = new ArrayList < MoolField > ();

  static List < MoolField > params = new ArrayList < MoolField > ();

  static List < MoolField > vars = new ArrayList < MoolField > ();

  static List < MoolField > constructor_params = new ArrayList < MoolField > ();

  static List < MoolField > constructor_vars = new ArrayList < MoolField > ();

  static ASTNode field_requires;

  static boolean constructor_context = false;

  static String mool_class_name;

  static int method_counter = 0;

  public Map < String, MoolClass > getMoolClasses()
  {
    return mool_classes;
  }

  public Context getSolverContext()
  {
    return ctx;
  }

  public void setParserContext(boolean parser_context)
  {
    this.parser_context = parser_context;
  }

  static final public void Start() throws ParseException, Exception {
    label_1:
    while (true) {
      Class();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
      case UNRESTRICTED:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
  }

  static final public void Class() throws ParseException, Exception {
  methods = new ArrayList < MoolMethod > ();
  fields = new ArrayList < MoolField > ();
  method_counter = 0;

  Token n = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNRESTRICTED:
      n = jj_consume_token(UNRESTRICTED);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(CLASS);
    class_name = jj_consume_token(ID);
    jj_consume_token(LBRACKET);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID_TYPE:
      case INTEGER_TYPE:
      case BOOLEAN_TYPE:
      case STRING_TYPE:
      case ID:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      Fields(0);
      jj_consume_token(L);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INV:
      Constructor();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REQ:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      Methods();
    }
    jj_consume_token(RBRACKET);
    if (parser_context)
    {
      mool_classes.put(class_name.image, new MoolClass(class_name.image, (n != null),null, null, constructor_name.image, constructor_body, methods, fields, constructor_params, constructor_vars));
      mool_classes_methods.put(class_name.image, methods);
    }
  }

  static final public void Methods() throws ParseException, Exception {
  //Token method_name = null;  Token method_type;
  ASTNode method_body;
  ASTNode method_requires, method_ensures;
  boolean is_sync = false;
  local_variables = new HashMap < String, String > ();
  method_params = new HashMap < String, String > ();
  params = new ArrayList < MoolField > ();
  vars = new ArrayList < MoolField > ();
  method_counter++;
    jj_consume_token(REQ);
    method_requires = AssertionOr(true);
    jj_consume_token(L);
    jj_consume_token(ENS);
    method_ensures = AssertionOr(false);
    jj_consume_token(L);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SYNC:
      jj_consume_token(SYNC);
                                                                                                                  is_sync = true;
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    method_type = Types();
    method_name = jj_consume_token(ID);
    jj_consume_token(LPAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID_TYPE:
    case INTEGER_TYPE:
    case BOOLEAN_TYPE:
    case STRING_TYPE:
    case ID:
      Fields(2);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        Fields(2);
      }
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(RPAR);
    jj_consume_token(LBRACKET);
    method_body = SyntaxConditional();
    jj_consume_token(RBRACKET);
    if (parser_context)
    {
      methods.add(0, new MoolMethod(method_name.image, method_type.image, is_sync, null, null, method_body, params, vars));
    }
    else
    {
      mool_classes.get(class_name.image).getMethod(method_name.image).setMethodRequires(method_requires);
      mool_classes.get(class_name.image).getMethod(method_name.image).setMethodEnsures(method_ensures);
    }
  }

  static final public Token Types() throws ParseException {
  Token n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID_TYPE:
      n = jj_consume_token(VOID_TYPE);
      break;
    case BOOLEAN_TYPE:
      n = jj_consume_token(BOOLEAN_TYPE);
      break;
    case INTEGER_TYPE:
      n = jj_consume_token(INTEGER_TYPE);
      break;
    case STRING_TYPE:
      n = jj_consume_token(STRING_TYPE);
      break;
    case ID:
      n = jj_consume_token(ID);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Fields(int mode) throws ParseException {
  Token n1, n2;
  MoolField f = null;
    n1 = Types();
    n2 = jj_consume_token(ID);
    switch (mode)
    {
      case 0 : class_fields.put(n2.image, n1.image);
      f = new MoolField(n2.image, n1.image, true, class_name.image);
      fields.add(f);
      break;
      case 1 : local_variables.put(n2.image, n1.image);
      if (constructor_context)
      {
        f = new MoolField(n2.image, n1.image, false, class_name.image);
        constructor_vars.add(f);
      }
      else
      {
        f = new MoolField(n2.image, n1.image, false, method_name.image);
        vars.add(f);
      }
      break;
      case 2 : method_params.put(n2.image, n1.image);
      if (constructor_context)
      {
        f = new MoolField(n2.image, n1.image, false, class_name.image);
        constructor_params.add(f);
      }
      else
      {
        f = new MoolField(n2.image, n1.image, false, method_name.image);
        params.add(f);
      }
      break;
    }
    {if (true) return new ASTField(n2.image, n1.image, (mode == 1), f, ctx);}
    throw new Error("Missing return statement in function");
  }

  static final public void Variables() throws ParseException {
  Token n1, n2;
    n1 = Types();
    n2 = jj_consume_token(ID);
    jj_consume_token(L);
    local_variables.put(n2.image, n1.image);
  }

  static final public void Constructor() throws ParseException, Exception {
  local_variables = new HashMap < String, String > ();
  method_params = new HashMap < String, String > ();
  constructor_params = new ArrayList < MoolField > ();
  constructor_vars = new ArrayList < MoolField > ();
  constructor_context = true;
    jj_consume_token(INV);
    invariant = AssertionOr(true);
    jj_consume_token(L);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REQ:
      jj_consume_token(REQ);
      constructor_requires = AssertionOr(true);
      jj_consume_token(L);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(INIT);
    initial = AssertionOr(false);
    jj_consume_token(L);
    jj_consume_token(VOID_TYPE);
    constructor_name = jj_consume_token(ID);
    jj_consume_token(LPAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID_TYPE:
    case INTEGER_TYPE:
    case BOOLEAN_TYPE:
    case STRING_TYPE:
    case ID:
      Fields(2);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_5;
        }
        jj_consume_token(COMMA);
        Fields(2);
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(RPAR);
    jj_consume_token(LBRACKET);
    constructor_body = SyntaxConditional();
    jj_consume_token(RBRACKET);
    constructor_context = false;
    if (!parser_context)
    {
      mool_classes.get(class_name.image).setClassInvariant(invariant);
      mool_classes.get(class_name.image).setClassInitialCondition(initial);
      mool_classes.get(class_name.image).getClassConstructor().setMethodRequires(constructor_requires);
    }
  }

  static final public ASTNode SyntaxConditional() throws ParseException, Exception {
  ASTNode t, t1, t2 = null;
  Token n, n1, n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      jj_consume_token(IF);
      jj_consume_token(LPAR);
      t = SyntaxOr();
      jj_consume_token(RPAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
      case NEW:
      case VOID_TYPE:
      case INTEGER_TYPE:
      case BOOLEAN_TYPE:
      case STRING_TYPE:
      case TRUE:
      case FALSE:
      case NULL:
      case UNIT:
      case PRINTSTR:
      case PRINTINT:
      case ID:
      case STRING:
      case INTEGER:
      case NOT:
      case MINUS:
        t1 = SyntaxAssign();
        jj_consume_token(L);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSE:
          jj_consume_token(ELSE);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAR:
          case NEW:
          case VOID_TYPE:
          case INTEGER_TYPE:
          case BOOLEAN_TYPE:
          case STRING_TYPE:
          case TRUE:
          case FALSE:
          case NULL:
          case UNIT:
          case PRINTSTR:
          case PRINTINT:
          case ID:
          case STRING:
          case INTEGER:
          case NOT:
          case MINUS:
            t2 = SyntaxAssign();
            jj_consume_token(L);
            break;
          case LBRACKET:
            jj_consume_token(LBRACKET);
            t2 = SyntaxSeq();
            jj_consume_token(RBRACKET);
            break;
          default:
            jj_la1[12] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        if (t2 != null) t = new ASTIf(t, t1, t2, ctx);
        else t = new ASTIf(t, t1, ctx);
        break;
      case LBRACKET:
        jj_consume_token(LBRACKET);
        t1 = SyntaxSeq();
        jj_consume_token(RBRACKET);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSE:
          jj_consume_token(ELSE);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAR:
          case NEW:
          case VOID_TYPE:
          case INTEGER_TYPE:
          case BOOLEAN_TYPE:
          case STRING_TYPE:
          case TRUE:
          case FALSE:
          case NULL:
          case UNIT:
          case PRINTSTR:
          case PRINTINT:
          case ID:
          case STRING:
          case INTEGER:
          case NOT:
          case MINUS:
            t2 = SyntaxAssign();
            jj_consume_token(L);
            break;
          case LBRACKET:
            jj_consume_token(LBRACKET);
            t2 = SyntaxSeq();
            jj_consume_token(RBRACKET);
            break;
          default:
            jj_la1[14] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[15] = jj_gen;
          ;
        }
        if (t2 != null) t = new ASTIf(t, t1, t2, ctx);
        else t = new ASTIf(t, t1, ctx);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
      case NEW:
      case VOID_TYPE:
      case INTEGER_TYPE:
      case BOOLEAN_TYPE:
      case STRING_TYPE:
      case TRUE:
      case FALSE:
      case NULL:
      case UNIT:
      case PRINTSTR:
      case PRINTINT:
      case SPAWN:
      case ID:
      case STRING:
      case INTEGER:
      case NOT:
      case MINUS:
        t2 = SyntaxSeq();
        t = new ASTSeq(t, t2, ctx);
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      break;
    case LPAR:
    case NEW:
    case VOID_TYPE:
    case INTEGER_TYPE:
    case BOOLEAN_TYPE:
    case STRING_TYPE:
    case TRUE:
    case FALSE:
    case NULL:
    case UNIT:
    case PRINTSTR:
    case PRINTINT:
    case SPAWN:
    case ID:
    case STRING:
    case INTEGER:
    case NOT:
    case MINUS:
      t = SyntaxSeq();
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode SyntaxSeq() throws ParseException, Exception {
  ASTNode t1, t2;
  Token n, n1, n2;
    t1 = SyntaxSpawn();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case L:
      jj_consume_token(L);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
      case NEW:
      case VOID_TYPE:
      case INTEGER_TYPE:
      case BOOLEAN_TYPE:
      case STRING_TYPE:
      case TRUE:
      case FALSE:
      case NULL:
      case UNIT:
      case IF:
      case PRINTSTR:
      case PRINTINT:
      case SPAWN:
      case ID:
      case STRING:
      case INTEGER:
      case NOT:
      case MINUS:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_6;
      }
      t2 = SyntaxConditional();
      t1 = new ASTSeq(t1, t2, ctx);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case L:
        jj_consume_token(L);
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
    }
    {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode SyntaxSpawn() throws ParseException, Exception {
  ASTNode t1, t2;
  Token n, n1, n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
    case NEW:
    case VOID_TYPE:
    case INTEGER_TYPE:
    case BOOLEAN_TYPE:
    case STRING_TYPE:
    case TRUE:
    case FALSE:
    case NULL:
    case UNIT:
    case PRINTSTR:
    case PRINTINT:
    case ID:
    case STRING:
    case INTEGER:
    case NOT:
    case MINUS:
      t1 = SyntaxAssign();
      break;
    case SPAWN:
      jj_consume_token(SPAWN);
      jj_consume_token(LBRACKET);
      t1 = SyntaxSeq();
      jj_consume_token(RBRACKET);
    t1 = new ASTSpawn(t1, ctx);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode SyntaxAssign() throws ParseException {
  ASTNode t1, t2;
  Token n, n1, n2;
    t1 = SyntaxOr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      t2 = SyntaxOr();
      t1 = new ASTAssign(ctx, t1.toString(), t2); //new ASTSkip(ctx);

      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode SyntaxOr() throws ParseException {
  ASTNode t1, t2;
  Token n, n1, n2;
    t1 = SyntaxAnd();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_7;
      }
      jj_consume_token(OR);
      t2 = SyntaxAnd();
      t1 = new ASTOr(t1, t2, ctx);
    }
    {if (true) return t1;}

    throw new Error("Missing return statement in function");
  }

  static final public ASTNode SyntaxAnd() throws ParseException {
  ASTNode t1, t2;
  Token n, n1, n2;
    t1 = SyntaxNot();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_8;
      }
      jj_consume_token(AND);
      t2 = SyntaxNot();
      t1 = new ASTAnd(t1, t2, ctx);
    }
    {if (true) return t1;}

    throw new Error("Missing return statement in function");
  }

  static final public ASTNode SyntaxNot() throws ParseException {
  ASTNode t, t1, t2;
  Token n, n1, n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      t = SyntaxComp();
      {if (true) return new ASTNot(t, ctx);}
      break;
    case LPAR:
    case NEW:
    case VOID_TYPE:
    case INTEGER_TYPE:
    case BOOLEAN_TYPE:
    case STRING_TYPE:
    case TRUE:
    case FALSE:
    case NULL:
    case UNIT:
    case PRINTSTR:
    case PRINTINT:
    case ID:
    case STRING:
    case INTEGER:
    case MINUS:
      t = SyntaxComp();
      {if (true) return t;}
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }

    throw new Error("Missing return statement in function");
  }

  static final public ASTNode SyntaxComp() throws ParseException {
  ASTNode t = null;
  ASTNode t1, t2;
  Token op, n, n1, n2;
    t1 = SyntaxArith();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
      case DIFF:
      case GREATER:
      case LESS:
      case GREATER_OR_EQUAL:
      case LESS_OR_EQUAL:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
        op = jj_consume_token(EQUAL);
        break;
      case DIFF:
        op = jj_consume_token(DIFF);
        break;
      case GREATER:
        op = jj_consume_token(GREATER);
        break;
      case LESS:
        op = jj_consume_token(LESS);
        break;
      case GREATER_OR_EQUAL:
        op = jj_consume_token(GREATER_OR_EQUAL);
        break;
      case LESS_OR_EQUAL:
        op = jj_consume_token(LESS_OR_EQUAL);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = SyntaxArith();
      if (op.kind == EQUAL) t1 = new ASTEqual(t1, t2, ctx);
      if (op.kind == DIFF) t1 = new ASTDiff(t1, t2, ctx);
      else if (op.kind == GREATER) t1 = new ASTGreater(t1, t2, ctx);
      else if (op.kind == LESS) t1 = new ASTLess(t1, t2, ctx);
      else if (op.kind == GREATER_OR_EQUAL) t1 = new ASTGreaterOrEqual(t1, t2, ctx);
      else if (op.kind == LESS_OR_EQUAL) t1 = new ASTLessOrEqual(t1, t2, ctx);
    }
    {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode SyntaxArith() throws ParseException {
  ASTNode t, t1, t2;
  Token op, n, n1, n2;
    t1 = SyntaxString();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case MULT:
      case DIV:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        op = jj_consume_token(PLUS);
        break;
      case MINUS:
        op = jj_consume_token(MINUS);
        break;
      case MULT:
        op = jj_consume_token(MULT);
        break;
      case DIV:
        op = jj_consume_token(DIV);
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = SyntaxString();
      if (op.kind == PLUS) t1 = new ASTPlus(t1, t2, ctx);
      else if (op.kind == MINUS) t1 = new ASTMinus(t1, t2, ctx);
      else if (op.kind == MULT) t1 = new ASTMult(t1, t2, ctx);
      else if (op.kind == DIV) t1 = new ASTDiv(t1, t2, ctx);
    }
    {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode SyntaxString() throws ParseException {
  ASTNode t, t1, t2;
  Token op, n, n1, n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
    case NEW:
    case VOID_TYPE:
    case INTEGER_TYPE:
    case BOOLEAN_TYPE:
    case STRING_TYPE:
    case TRUE:
    case FALSE:
    case NULL:
    case UNIT:
    case ID:
    case STRING:
    case INTEGER:
    case MINUS:
      t1 = SyntaxGroup();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONCAT:
          ;
          break;
        default:
          jj_la1[31] = jj_gen;
          break label_11;
        }
        jj_consume_token(CONCAT);
        t2 = SyntaxGroup();
      t1 = new ASTConcat(t1, t2, ctx);
      }
      break;
    case PRINTSTR:
      jj_consume_token(PRINTSTR);
      jj_consume_token(LPAR);
      t1 = SyntaxGroup();
      jj_consume_token(RPAR);
  t1 = new ASTPrintStr(t1.toString(), ctx);
      break;
    case PRINTINT:
      jj_consume_token(PRINTINT);
      jj_consume_token(LPAR);
      t1 = SyntaxGroup();
      jj_consume_token(RPAR);
  t1 = new ASTPrintInt(t1.toString(), ctx);
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode SyntaxGroup() throws ParseException {
  ASTNode t, t1, t2;
  Token op, n, n1, n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
      jj_consume_token(LPAR);
      t1 = SyntaxOr();
      jj_consume_token(RPAR);
      break;
    case NEW:
    case VOID_TYPE:
    case INTEGER_TYPE:
    case BOOLEAN_TYPE:
    case STRING_TYPE:
    case TRUE:
    case FALSE:
    case NULL:
    case UNIT:
    case ID:
    case STRING:
    case INTEGER:
    case MINUS:
      t1 = SyntaxCall();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONCAT:
          ;
          break;
        default:
          jj_la1[33] = jj_gen;
          break label_12;
        }
        jj_consume_token(CONCAT);
        t2 = SyntaxCall();
        t1 = new ASTConcat(t1, t2, ctx);
      }
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode SyntaxCall() throws ParseException {
  ASTNode t, t1, t2;
  Token op, n, n1, n2;
  List < ASTNode > call_params = new ArrayList < ASTNode > ();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID_TYPE:
    case INTEGER_TYPE:
    case BOOLEAN_TYPE:
    case STRING_TYPE:
    case TRUE:
    case FALSE:
    case NULL:
    case UNIT:
    case ID:
    case STRING:
    case INTEGER:
    case MINUS:
      t = SyntaxLiteral();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
      case DOT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          jj_consume_token(DOT);
          n = jj_consume_token(ID);
          jj_consume_token(LPAR);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAR:
          case NEW:
          case VOID_TYPE:
          case INTEGER_TYPE:
          case BOOLEAN_TYPE:
          case STRING_TYPE:
          case TRUE:
          case FALSE:
          case NULL:
          case UNIT:
          case PRINTSTR:
          case PRINTINT:
          case ID:
          case STRING:
          case INTEGER:
          case NOT:
          case MINUS:
            t1 = SyntaxOr();
          call_params.add(t1);
            label_13:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMMA:
                ;
                break;
              default:
                jj_la1[35] = jj_gen;
                break label_13;
              }
              jj_consume_token(COMMA);
              t1 = SyntaxOr();
            call_params.add(t1);
            }
            break;
          default:
            jj_la1[36] = jj_gen;
            ;
          }
          jj_consume_token(RPAR);
                MoolClass mc = mool_classes.get(class_fields.get(t.toString()));

                if(mc == null)
                {
                        mc = mool_classes.get(method_params.get(t.toString()));


                }
                if(mc == null)
                        {
                          //System.out.println(t.toString() + " :;:;: " + mool_classes.size());
                          mc = mool_classes.get(local_variables.get(t.toString()));
                        }

                        //System.out.println(t.toString() + "                          " + mc);
        if (mc.getMethod(n.image) != null) t = new ASTCall(ctx, t.toString(), n.image, call_params, true, mc.getMethod(method_name.image), mc.getMethod(n.image));
        //t = mool_classes.get(class_fields.get(t.toString())).getMethod(n.image).getMethodBody(); //ctx.mkBoolConst(n.image + "_call_on_" + t.toString());        

          break;
        case LPAR:
          jj_consume_token(LPAR);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAR:
          case NEW:
          case VOID_TYPE:
          case INTEGER_TYPE:
          case BOOLEAN_TYPE:
          case STRING_TYPE:
          case TRUE:
          case FALSE:
          case NULL:
          case UNIT:
          case PRINTSTR:
          case PRINTINT:
          case ID:
          case STRING:
          case INTEGER:
          case NOT:
          case MINUS:
            //n1 = < ID >
                    t1 = SyntaxOr();
          call_params.add(t1);
            label_14:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMMA:
                ;
                break;
              default:
                jj_la1[37] = jj_gen;
                break label_14;
              }
              jj_consume_token(COMMA);
              t1 = SyntaxOr();
            call_params.add(t1);
            }
            break;
          default:
            jj_la1[38] = jj_gen;
            ;
          }
          jj_consume_token(RPAR);
        if (parser_context)
        {
          t = new ASTCall(ctx, "this", t.toString(), call_params, true, null, null);
        }
          break;
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
      break;
    case NEW:
      jj_consume_token(NEW);
      t = SyntaxLiteral();
      jj_consume_token(LPAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
      case NEW:
      case VOID_TYPE:
      case INTEGER_TYPE:
      case BOOLEAN_TYPE:
      case STRING_TYPE:
      case TRUE:
      case FALSE:
      case NULL:
      case UNIT:
      case PRINTSTR:
      case PRINTINT:
      case ID:
      case STRING:
      case INTEGER:
      case NOT:
      case MINUS:
        //n1 = < ID >
                t1 = SyntaxOr();
          call_params.add(t1);
        label_15:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[41] = jj_gen;
            break label_15;
          }
          jj_consume_token(COMMA);
          t1 = SyntaxOr();
            call_params.add(t1);
        }
        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
      jj_consume_token(RPAR);
      t = new ASTNew(t.toString(), call_params, ctx);
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode SyntaxLiteral() throws ParseException {
  ASTNode t, t1, t2;
  Token n, n1, n2;
    if (jj_2_1(2)) {
      n = jj_consume_token(UNIT);
      {if (true) return new ASTUnit(ctx);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
        n = jj_consume_token(TRUE);
      {if (true) return new ASTTrue(ctx);}
        break;
      case FALSE:
        n = jj_consume_token(FALSE);
      {if (true) return new ASTFalse(ctx);}
        break;
      case NULL:
        n = jj_consume_token(NULL);
      {if (true) return new ASTNull(ctx);}
        break;
      case STRING:
        n = jj_consume_token(STRING);
      //return new ASTInteger(n.image.length(), ctx);
      {if (true) return new ASTString(n.image, ctx);}
        break;
      default:
        jj_la1[44] = jj_gen;
        if (jj_2_2(2)) {
          t = Fields(1);
      {if (true) return t;}
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ID:
            n = jj_consume_token(ID);
      if (class_fields.containsKey(n.image)) {if (true) return new ASTField(n.image, class_fields.get(n.image), false, null, ctx);}
      else if (local_variables.containsKey(n.image)) {if (true) return new ASTField(n.image, local_variables.get(n.image), false, null, ctx);}
      else if (method_params.containsKey(n.image)) {if (true) return new ASTField(n.image, method_params.get(n.image), false, null, ctx);}
      else if (mool_classes.containsKey(n.image)) {if (true) return new ASTId(n.image, ctx);}
      else {if (true) return new ASTId(n.image, ctx);}
            break;
          case INTEGER:
            n = jj_consume_token(INTEGER);
      {if (true) return new ASTInteger(Integer.parseInt(n.image), ctx);}
            break;
          case MINUS:
            jj_consume_token(MINUS);
            n = jj_consume_token(INTEGER);
      {if (true) return new ASTInteger(-Integer.parseInt(n.image), ctx);}
            break;
          default:
            jj_la1[45] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }

    throw new Error("Missing return statement in function");
  }

/*** Assertions*/
  static final public ASTNode AssertionOr(boolean is_negation) throws ParseException, Exception {
  ASTNode t1, t2;
  Token n, n1, n2;
    t1 = AssertionAnd(is_negation);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[46] = jj_gen;
        break label_16;
      }
      jj_consume_token(OR);
      t2 = AssertionAnd(is_negation);
      t1 = new ASTOr(t1, t2, ctx);
    }
    {if (true) return t1;}

    throw new Error("Missing return statement in function");
  }

  static final public ASTNode AssertionAnd(boolean is_negation) throws ParseException, Exception {
  ASTNode t1, t2;
  Token n, n1, n2;
    t1 = AssertionImplies(is_negation);
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[47] = jj_gen;
        break label_17;
      }
      jj_consume_token(AND);
      t2 = AssertionImplies(is_negation);
      t1 = new ASTAnd(t1, t2, ctx);
    }
    {if (true) return t1;}

    throw new Error("Missing return statement in function");
  }

  static final public ASTNode AssertionImplies(boolean is_negation) throws ParseException, Exception {
  ASTNode t1, t2;
  Token n, n1, n2;
    t1 = AssertionNot(is_negation);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLIES:
      jj_consume_token(IMPLIES);
      t2 = AssertionNot(is_negation);
      t1 = new ASTImplies(t1, t2, ctx); //ctx.mkImplies(t1.getAssertion(), t2.getAssertion());//new ASTImplies(t1, t2, ctx);

      break;
    default:
      jj_la1[48] = jj_gen;
      ;
    }
    {if (true) return t1;}

    throw new Error("Missing return statement in function");
  }

  static final public ASTNode AssertionNot(boolean is_negation) throws ParseException, Exception {
  ASTNode t, t1, t2;
  Token n, n1, n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      t = AssertionComp(true);
      {if (true) return new ASTNot(t, ctx);}
      break;
    case LPAR:
    case NEW:
    case TRUE:
    case FALSE:
    case NULL:
    case UNIT:
    case ID:
    case STRING:
    case INTEGER:
    case MINUS:
      t = AssertionComp(false);
      {if (true) return t;}
      break;
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }

    throw new Error("Missing return statement in function");
  }

  static final public ASTNode AssertionComp(boolean is_negation) throws ParseException, Exception {
  ASTNode t = null;
  ASTNode t1, t2;
  Token op, n, n1, n2;
    t1 = AssertionArith(is_negation);
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
      case DIFF:
      case GREATER:
      case LESS:
      case GREATER_OR_EQUAL:
      case LESS_OR_EQUAL:
        ;
        break;
      default:
        jj_la1[50] = jj_gen;
        break label_18;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
        op = jj_consume_token(EQUAL);
        break;
      case DIFF:
        op = jj_consume_token(DIFF);
        break;
      case GREATER:
        op = jj_consume_token(GREATER);
        break;
      case LESS:
        op = jj_consume_token(LESS);
        break;
      case GREATER_OR_EQUAL:
        op = jj_consume_token(GREATER_OR_EQUAL);
        break;
      case LESS_OR_EQUAL:
        op = jj_consume_token(LESS_OR_EQUAL);
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = AssertionArith(is_negation);
      if (op.kind == EQUAL) t1 = new ASTEqual(t1, t2, ctx);
      if (op.kind == DIFF) t1 = new ASTDiff(t1, t2, ctx);
      else if (op.kind == GREATER) t1 = new ASTGreater(t1, t2, ctx);
      else if (op.kind == LESS) t1 = new ASTLess(t1, t2, ctx);
      else if (op.kind == GREATER_OR_EQUAL) t1 = new ASTGreaterOrEqual(t1, t2, ctx);
      else if (op.kind == LESS_OR_EQUAL) t1 = new ASTLessOrEqual(t1, t2, ctx);
    }
    {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode AssertionArith(boolean is_negation) throws ParseException, Exception {
  ASTNode t, t1, t2;
  Token op, n, n1, n2;
    t1 = AssertionString(is_negation);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case MULT:
      case DIV:
        ;
        break;
      default:
        jj_la1[52] = jj_gen;
        break label_19;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        op = jj_consume_token(PLUS);
        break;
      case MINUS:
        op = jj_consume_token(MINUS);
        break;
      case MULT:
        op = jj_consume_token(MULT);
        break;
      case DIV:
        op = jj_consume_token(DIV);
        break;
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = AssertionString(is_negation);
      if (op.kind == PLUS) t1 = new ASTPlus(t1, t2, ctx);
      else if (op.kind == MINUS) t1 = new ASTMinus(t1, t2, ctx);
      else if (op.kind == MULT) t1 = new ASTMult(t1, t2, ctx);
      else if (op.kind == DIV) t1 = new ASTDiv(t1, t2, ctx);
    }
    {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode AssertionString(boolean is_negation) throws ParseException, Exception {
  ASTNode t, t1, t2;
  Token op, n, n1, n2;
    t1 = AssertionGroup(is_negation);
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONCAT:
        ;
        break;
      default:
        jj_la1[54] = jj_gen;
        break label_20;
      }
      jj_consume_token(CONCAT);
      t2 = AssertionGroup(is_negation);
      t1 = new ASTConcat(t1, t2, ctx);
    }
    {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode AssertionGroup(boolean is_negation) throws ParseException, Exception {
  ASTNode t, t1, t2;
  Token op, n, n1, n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
      jj_consume_token(LPAR);
      t1 = AssertionOr(is_negation);
      jj_consume_token(RPAR);
      break;
    case NEW:
    case TRUE:
    case FALSE:
    case NULL:
    case UNIT:
    case ID:
    case STRING:
    case INTEGER:
    case MINUS:
      t1 = AssertionCall(is_negation);
      break;
    default:
      jj_la1[55] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode AssertionCall(boolean is_negation) throws ParseException, Exception {
  ASTNode t, t1, t2 = null;
  Token op, n, n1, n2;

  MoolMethod m, method_called = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case NULL:
    case UNIT:
    case ID:
    case STRING:
    case INTEGER:
    case MINUS:
      t = AssertionLiteral(is_negation);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
      case DOT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          jj_consume_token(DOT);
          n = jj_consume_token(ID);
          jj_consume_token(LPAR);
          jj_consume_token(RPAR);
        if (parser_context) {if (true) return t;}




        String id = class_fields.get(t.toString());

        if (id != null)
        {
          method_called = mool_classes.get(class_fields.get(t.toString())).getMethod(n.image);

          MoolClass mc = mool_classes.get(class_name.image);

          if (constructor_context)
          {

            m = mc.getClassConstructor();
          } else
          {

            //MoolMethod m = mc.getClassMethods().get(method_counter+1);

            Iterator< MoolMethod > method_it = mc.getClassMethods().iterator();

                        while(method_it.hasNext())
                        {
                                m = method_it.next();

                                if(m.getMethodName().equals(method_name))
                                        break;
                        }

            if(method_it.hasNext())
                                m = method_it.next();
            else
                m = mc.getClassMethods().get(mc.getClassMethods().size() - 1);
          }
        }
        else
        {

          if (constructor_context)
          {
            MoolClass mc = mool_classes.get(class_name.image);



            m = mc.getClassConstructor();
            MoolField f = m.getMethodParameter(t.toString());

           // System.out.println("JJGUHIHIH " + t.toString() + "     " + mc.getClassName() + "  " + f.getFieldName());
            if (f != null)
            {
              method_called = mool_classes.get(f.getFieldType()).getMethod(n.image);

              //System.out.println("MOE  " +  mool_classes.get(f.getFieldType()).getMethod(n.image) );
            }
            else
            {
              f = m.getMethodVariable(t.toString());
              if (f != null)
              {
                method_called = mool_classes.get(f.getFieldType()).getMethod(n.image);

              }
              /*else
              {
                //throw new Exception();
              }*/
            }
          }
          else
          {
            MoolClass mc = mool_classes.get(class_name.image);
            //MoolMethod m = mc.getClassMethods().get(method_counter+1);

            Iterator< MoolMethod > method_it = mc.getClassMethods().iterator();

                        while(method_it.hasNext())
                        {
                                m = method_it.next();

                                if(m.getMethodName().equals(method_name))
                                        break;
                        }

            if(method_it.hasNext())
                                m = method_it.next();
            else
                m = mc.getClassMethods().get(mc.getClassMethods().size() - 1);


            MoolField f = m.getMethodParameter(t.toString());

            if (f != null)
            {
              method_called = mool_classes.get(f.getFieldType()).getMethod(n.image);
            }
            else
            {
              f = m.getMethodVariable(t.toString());
              if (f != null)
              {
                method_called = mool_classes.get(f.getFieldType()).getMethod(n.image);
              }
              /*else
              {
                throw new Exception();
              }*/
            }
          }


        }
                t = new ASTCall(ctx, t.toString(), n.image, null, is_negation, m, method_called);
          break;
        case LPAR:
          jj_consume_token(LPAR);
          jj_consume_token(RPAR);
        if (!parser_context) t = mool_classes.get("FileReader").getMethod(t.toString()).getMethodBody(); //ctx.mkBoolConst(n.image + "_call_on_" + t.toString());
        else t = new ASTSkip(ctx);
          break;
        default:
          jj_la1[56] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[57] = jj_gen;
        ;
      }
      break;
    case NEW:
      jj_consume_token(NEW);
      t = AssertionLiteral(is_negation);
      jj_consume_token(LPAR);
      jj_consume_token(RPAR);
      mool_class = mool_classes.get(t.toString());
      if (mool_class != null) t = mool_class.getClassInitialCondition(); //ctx.mkBoolConst(n.image + "_call_on_" + t.toString());

      break;
    default:
      jj_la1[58] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode AssertionLiteral(boolean is_negation) throws ParseException {
  ASTNode t, t1, t2;
  Token n, n1, n2;
    if (jj_2_3(2)) {
      n = jj_consume_token(UNIT);
      {if (true) return new ASTSkip(ctx);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
        n = jj_consume_token(TRUE);
      {if (true) return new ASTTrue(ctx);}
        break;
      case FALSE:
        n = jj_consume_token(FALSE);
      {if (true) return new ASTFalse(ctx);}
        break;
      case NULL:
        n = jj_consume_token(NULL);
      {if (true) return new ASTNull(ctx);}
        break;
      case STRING:
        n = jj_consume_token(STRING);
      {if (true) return new ASTInteger(n.image.length(), ctx);}
        break;
      case ID:
        n = jj_consume_token(ID);
      if (class_fields.containsKey(n.image)) {if (true) return new ASTField(n.image, class_fields.get(n.image), false, null, ctx);}
      else if (local_variables.containsKey(n.image)) {if (true) return new ASTField(n.image, local_variables.get(n.image), false, null, ctx);}
      else if (method_params.containsKey(n.image)) {if (true) return new ASTField(n.image, method_params.get(n.image), false, null, ctx);}
      else if (mool_classes.containsKey(n.image)) {if (true) return new ASTId(n.image, ctx);}
      else {if (true) return new ASTId(n.image, ctx);}
        break;
      case INTEGER:
        n = jj_consume_token(INTEGER);
      {if (true) return new ASTInteger(Integer.parseInt(n.image), ctx);}
        break;
      case MINUS:
        jj_consume_token(MINUS);
        n = jj_consume_token(INTEGER);
      {if (true) return new ASTInteger(-Integer.parseInt(n.image), ctx);}
        break;
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }

    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_22()) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(UNIT)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(UNIT)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MoolMinusParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[60];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x60,0x40,0x801e0000,0x800,0x2000,0x8000,0x0,0x801e0000,0x801e0000,0x2000,0x0,0x801e0000,0xb2ff0280,0x8000000,0xb2ff0280,0x8000000,0xb2ff0280,0xf2ff0200,0xf6ff0200,0x0,0xf6ff0200,0x0,0xf2ff0200,0x0,0x0,0x0,0xb2ff0200,0x0,0x0,0x0,0x0,0x0,0xb2ff0200,0x0,0x82ff0200,0x0,0xb2ff0200,0x0,0xb2ff0200,0x200,0x200,0x0,0xb2ff0200,0x82ff0000,0xe00000,0x80000000,0x0,0x0,0x0,0x82e10200,0x0,0x0,0x0,0x0,0x0,0x82e10200,0x200,0x200,0x82e10000,0x80e00000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x0,0x0,0x0,0x80000,0x0,0x8013,0x0,0x8013,0x0,0x8013,0x8013,0x8013,0x100000,0x8013,0x100000,0x8013,0x2000,0x4,0x8,0x8013,0xfc0,0xfc0,0x3c000,0x3c000,0x40000,0x8003,0x40000,0x8003,0x80000,0x8013,0x80000,0x8013,0x1000,0x1000,0x80000,0x8013,0x8003,0x1,0x8002,0x4,0x8,0x20,0x8013,0xfc0,0xfc0,0x3c000,0x3c000,0x40000,0x8003,0x1000,0x1000,0x8003,0x8003,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[3];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MoolMinusParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MoolMinusParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MoolMinusParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MoolMinusParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MoolMinusParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MoolMinusParser(MoolMinusParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MoolMinusParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[53];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 60; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 53; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
